--import statement below. 
--use "\" between directories
-- use single quotes (' ') around path name
--\i 'D:/Matthew/Google Drive/UW Bothell/1 Winter Quarter 2022/1 CSS 475/Homework/Car Database/CarDatabase.txt'


CREATE TABLE State (
	ID			VARCHAR(2) 	NOT NULL,
	Name		VARCHAR(14) 	NOT NULL,

	Primary Key	(ID)
);

CREATE TABLE Customer (
	ID			SERIAL      NOT NULL,
	First_Name	VARCHAR(20) NOT NULL,
	Last_Name	VARCHAR(20) NOT NULL,
	Email		VARCHAR(20) UNIQUE,
	Phone		VARCHAR(11) NOT NULL,
	Address		VARCHAR(30) NOT NULL,
	City		VARCHAR(30) NOT NULL,
	ZipCode		VARCHAR(5)  NOT NULL,
	State		VARCHAR(2)  NOT NULL,

	Primary Key	(ID),
	Foreign Key 	(State) references State(ID)
				Deferrable Initially Deferred
);

CREATE TABLE Make (
   ID    SERIAL		NOT NULL,
   Name  VARCHAR(10)	NOT NULL,

   Primary key ( ID)
);

CREATE TABLE Model (
	ID		SERIAL		NOT NULL,
	Year	INTEGER		NOT NULL,
	MakeID	INTEGER		NOT NULL,
	Name	VARCHAR(10)	NOT NULL,

	Primary key ( ID),
	Foreign Key ( MakeID) references Make( ID) 
	Deferrable Initially Deferred
);


CREATE TABLE Vehicle (
	ID 			SERIAL       NOT NULL, 
	VIN 			VARCHAR(17)  UNIQUE NOT NULL, 
	Modelid 		INTEGER      NOT NULL, 
	Trim 			VARCHAR(20), 
	Msrp 			NUMERIC(8,2) NOT NULL, 
	Color			VARCHAR(20)  NOT NULL, 
	Parkingstall 	VARCHAR(4)   UNIQUE, 
	HasRecalls 		BOOLEAN      NOT NULL, 
	RecallNotes 	VARCHAR(120), 
	Odometer 		INTEGER      NOT NULL, 
	IsNew			BOOLEAN      NOT NULL, 
	
	Primary Key(ID),
	Foreign Key(ModelId) references Model(ID) 
	Deferrable Initially Deferred
);

CREATE TABLE Employee ( 
	ID			SERIAL NOT NULL, 
	First_Name		VARCHAR(20) NOT NULL, 
	Last_Name 		VARCHAR(20) NOT NULL, 
	Password 		VARCHAR(20) NOT NULL,

	Primary Key	(ID)
);


CREATE TABLE Sale (
	ID			SERIAL		NOT NULL,
	VehicleID		INTEGER		NOT NULL,
	CustomerID		INTEGER		NOT NULL,
	EmployeeID		INTEGER		NOT NULL,
	Date			DATE		NOT NULL,
	Price			NUMERIC(8,2)	NOT NULL,
	DealerPurchase 		BOOLEAN		NOT NULL,

	Primary key ( ID),
	Foreign key ( VehicleID) references Vehicle( ID) 
	Deferrable Initially Deferred,
	Foreign key ( CustomerID) references Customer( ID) 
	Deferrable Initially Deferred,
	Foreign key ( EmployeeID) references Employee( ID) 
	Deferrable Initially Deferred
);


INSERT INTO State VALUES ('WA', 'Washington'), ('FL', 'Florida'), ('NY', 'New York');


INSERT INTO Customer VALUES (nextval('customer_id_seq'), 'Trenton', 'Allison',
                             'tallison@uw.edu', '0123456789', '3000 Husky Drive',
                             'Bothell', '98000', 'WA'
                            ),
                            (nextval('customer_id_seq'), 'Mickey', 'Mouse', 
                             'mmouse@disney.com', '8008675309', '1180 Seven Seas Drive', 
                             'Orlando', '32830', 'FL'  
                            ),
                            (nextval('customer_id_seq'), 'Eric', 'Adams', 
                             'mayor@nyc.gov', '2126399675', 'City Hall',
                             'New York', '10007', 'NY'
                            );

INSERT INTO Make VALUES ( nextval('make_id_seq'), 'Chevrolet'), 
                        ( nextval('make_id_seq'), 'Hummer'), 
                        ( nextval('make_id_seq'), 'Toyota');

INSERT INTO Model VALUES ( nextval('model_id_seq'), 2022, (currval('make_id_seq')-2), 
                           'Corvette'
                         ),
                         ( nextval('model_id_seq'), 2008, (currval('make_id_seq')-1), 'H3'
                         ),
                         ( nextval('model_id_seq'), 2016, (currval('make_id_seq')  ),
                           'Prius'
                         );

INSERT INTO Vehicle VALUES (nextval('vehicle_id_seq'), '12345678901234567',
                             (currval('make_id_seq')-2), 'Stingray', 80000.00, 
                             'White, black stripe', 380, False, NULL, 20, True
                            ),
                            (nextval('vehicle_id_seq'), '12345678909876543',
                             (currval('make_id_seq')-1), NULL, 100000.00, 
                             'Yellow', NULL, False, NULL, 17, False
                            ),
                            (nextval('vehicle_id_seq'), '12345678901113150',
                             currval('make_id_seq'),    'C',   40000.00,  
                             'Blue'  , NULL, False, NULL, 34, False
                            );

INSERT INTO Employee VALUES (nextval('employee_id_seq'), 'Tommy', 'Lee', 'Tommyboy1'),
                            (nextval('employee_id_seq'), 'Bruce', 'Lee', 'NinjaMan6'),
                            (nextval('employee_id_seq'), 'Clark', 'Kent', 'Supesboi!');
INSERT INTO Sale VALUES (nextval('Sale_id_seq'), currval('Vehicle_id_seq'),
                         currval('Customer_id_seq'), currval('employee_id_seq'),
                         '12-25-2021', 65000.00, false
                        ),
                        (nextval('Sale_id_seq'), (currval('Vehicle_id_seq')-1),
                         (currval('Customer_id_seq')-1), (currval('employee_id_seq')-1),
                         '03-06-2007', 120000.00, false
                        );


PREPARE ViewInventory_filter_make (text) AS
        SELECT Make.name AS make, Model.name AS model, Trim, Color, MSRP, IsNew
        FROM Vehicle
           JOIN Model ON ( vehicle.modelid = model.id)
           JOIN Make ON  ( model.makeid = make.id)
        WHERE (Parkingstall IS NOT NULL) AND (make.name ILIKE $1)
        ORDER BY MSRP;

PREPARE ViewInventory_filter_model (text) AS
        SELECT Make.name AS make, Model.name AS model, Trim, Color, MSRP, IsNew
        FROM Vehicle
           JOIN Model ON ( vehicle.modelid = model.id)
           JOIN Make ON  ( model.makeid = make.id)
        WHERE (Parkingstall IS NOT NULL) AND (model.name ILIKE $1)
        ORDER BY MSRP;


PREPARE ViewInventory_filter_Trim (text) AS
        SELECT Make.name AS make, Model.name AS model, Trim, Color, MSRP, IsNew
        FROM Vehicle
           JOIN Model ON ( vehicle.modelid = model.id)
           JOIN Make ON  ( model.makeid = make.id)
        WHERE (Parkingstall IS NOT NULL) AND (trim ILIKE $1)
        ORDER BY MSRP;

PREPARE ViewInventory_filter_Color (text) AS
        SELECT Make.name AS make, Model.name AS model, Trim, Color, MSRP, IsNew
        FROM Vehicle
           JOIN Model ON ( vehicle.modelid = model.id)
           JOIN Make ON  ( model.makeid = make.id)
        WHERE (Parkingstall IS NOT NULL) AND (color ILIKE $1)
        ORDER BY MSRP;

PREPARE ViewInventory_filter_New ( text ) AS
        SELECT Make.name AS make, Model.name AS model, Trim, Color, MSRP, IsNew
        FROM Vehicle
           JOIN Model ON ( vehicle.modelid = model.id)
           JOIN Make ON  ( model.makeid = make.id)
        WHERE (Parkingstall IS NOT NULL) AND (IsNew)
        ORDER BY MSRP;

PREPARE CreateSale (text) AS
        INSERT INTO Sale VALUES (nextval('Sale_id_seq'), 
                          (SELECT Vehicle.id 
                           FROM Vehicle 
                           WHERE VIN = $1
                          ),
                         (SELECT Customer.ID 
                          FROM Customer 
                          WHERE (First_Name ILIKE $2) AND (Phone ILIKE $3)
                         ),
                         $4, $5, $6, false);

PREPARE MoveCarToBuyer (text) AS
        UPDATE Vehicle 
        SET ParkingStall = NULL
        WHERE VIN = $1;

PREPARE CreatePurchase (text) AS
        INSERT INTO Sale VALUES (nextval('Sale_id_seq'), 
                          (SELECT Vehicle.id 
                           FROM Vehicle 
                           WHERE VIN = $1
                          ),
                         (SELECT Customer.ID 
                          FROM Customer 
                          WHERE (First_Name ILIKE $2) AND (Phone ILIKE $3)
                         ),
                         $4, $5, $6, true);

PREPARE MoveCarToParkingSpot (text) AS
        UPDATE Vehicle 
        SET ParkingStall = $1
        WHERE VIN = $2;

PREPARE Generate_Vehicle_Report (text) AS
        SELECT * 
        FROM Vehicle
        WHERE VIN = $1;

PREPARE Transactions_report (text) AS
        SELECT *
        FROM Sale;

PREPARE Sales_by_employee (integer) AS
        SELECT *
        FROM Sale
        WHERE employeeid = $1;

PERPARE Sales_report (text) AS
       SELECT *
       FROM Sale
       WHERE DealerPurchase = false;

PREPARE Purchases_report (text) AS
        SELECT *
        FROM Sale
        WHERE DealerPurchase = true;

PREPARE Sales_by_date (text) AS
        SELECT *
        FROM Sale
        WHERE ($1 < date) AND ($2 > date);